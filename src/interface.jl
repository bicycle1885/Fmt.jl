"""
A data type to represent a string format. Instances of this type are
generated by the [`@f_str`](@ref) macro.
"""
struct Format{F}
    str::String
    fun::F
end

Base.show(out::IO, fmt::Format) = print(out, "f\"", fmt.str, '"')

"""
    format(fmt::Fmt.Format, positionals...; keywords...)

Create a formatted string.
"""
format(fmt::Format, positionals...; keywords...) = fmt.fun(positionals...; keywords...)
format(fmt::String, positionals...; keywords...) = fmt

"""
    printf([out::IO,] fmt::Fmt.Format, positional...; keywords...)

Output a formatted string to `out` (default: `stdout`).
"""
printf(out::IO, fmt::Format, positionals...; keywords...) = print(out, fmt.fun(positionals...; keywords...))
printf(fmt::Format, positionals...; keywords...) = printf(stdout, fmt, positionals...; keywords...)
printf(out::IO, fmt::String, positionals...; keywords...) = print(out, fmt)
printf(fmt::String, positionals...; keywords...) = printf(stdout, fmt, positionals...; keywords...)

"""
    @f_str fmt

Create a formatted string or a formatter object from string `fmt`.

If all argument names of replacement fields are preceded by `\$`, it creates
a new formatted string with all fields being interpolated. If there are no
replacement fields, it returns the string as it is. Otherwise, it creates a
formatting object of the [`Fmt.Format`](@ref) type, which can be passed to
the [`Fmt.format`](@ref) function to create or output formatted strings.

# Examples
```jldoctest
julia> using Fmt

julia> x, y = 42, -8;

julia> f"({\$x}, {\$y})"  # all variables are interpolated
"(42, -8)"

julia> fmt = f"({x}, {y})"  # x and y are now a placeholder
f"({x}, {y})"

julia> Fmt.format(fmt; x, y)  # substitute variables
"(42, -8)"
```
"""
macro f_str(fstr) compile(unescape_string(fstr)) end
